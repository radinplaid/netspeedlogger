{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Internet Speed Test Logger \u00b6 A python library for keeping track of your internet speed over time Free software: MIT Documentation: https://netspeedlogger.readthedocs.io Features \u00b6 Easily test your internet speed with (speedtest-cli)[https://github.com/sivel/speedtest-cli] Keep track of your internet speed over time (Streamlit)[https://streamlit.io/] application for visualizing results Credits \u00b6 This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"home"},{"location":"#internet-speed-test-logger","text":"A python library for keeping track of your internet speed over time Free software: MIT Documentation: https://netspeedlogger.readthedocs.io","title":"Internet Speed Test Logger"},{"location":"#features","text":"Easily test your internet speed with (speedtest-cli)[https://github.com/sivel/speedtest-cli] Keep track of your internet speed over time (Streamlit)[https://streamlit.io/] application for visualizing results","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"\u00b6 Top-level package for Internet Speed Test Logger. cli \u00b6 Console script for netspeedlogger. delete_database () \u00b6 Run a SQL querry on the netspeedlogger database and print a table of the results Source code in netspeedlogger/cli.py def delete_database (): \"\"\"Run a SQL querry on the netspeedlogger database and print a table of the results\"\"\" db_path = get_database_path () print ( f \"Deleting netspeedlogger database at path: ` { db_path } `\" ) print ( \"Are you sure you want to delete the whole database? Input 'y' for yes or 'n' for no\" ) for i in range ( 10 ): confirmation = input ( \"Please type 'y' for Yes or 'n' for No\" ) if confirmation == \"n\" : return \"Not deleting database\" elif confirmation == \"y\" : delete_database_if_exists () return \"Database deleted\" results () \u00b6 Show all results from the netspeedlogger database If there are more than 10000 results, will show the first 10000 Source code in netspeedlogger/cli.py def results (): \"\"\"Show all results from the netspeedlogger database If there are more than 10000 results, will show the first 10000 \"\"\" sql_to_markdown ( \"select substr(timestamp,1,19) as 'Date Time', \" \" download_speed/(1024*1024) as 'Download Speed (Mb/s)', \" \" upload_speed/(1024*1024) as 'Upload Speed (Mb/s)', \" \" bytes_sent/(1024) as 'kB Sent', \" \" bytes_received/(1024) as 'kB Recieved', \" \" server_id as 'Server ID', \" \" server_host as 'Server Host', \" \" ping as 'Ping (ms)' \" \" from netspeedlogger limit 10000\" ) speedtest () \u00b6 Run an internet speed test using speedtest-cli and save the results to a local sqlite database Source code in netspeedlogger/cli.py def speedtest (): \"\"\"Run an internet speed test using speedtest-cli and save the results to a local sqlite database\"\"\" print ( \"netspeedlogger speedtest\" ) print ( \"=\" * len ( \"netspeedlogger speedtest\" )) print ( \"Starting to run an internet speed test, and logging the output\" ) results_dict = run_speedtest () df = speedtest_dict_to_dataframe ( results_dict ) write_speedtest_to_database ( df ) print ( \"Speedtest complete. Results:\" ) print ( df . to_markdown ( index = False )) sql_to_markdown ( sql_query , showindex = False ) \u00b6 Run a SQL querry on the netspeedlogger database and print a table of the results Source code in netspeedlogger/cli.py def sql_to_markdown ( sql_query : str , showindex : bool = False ): \"\"\"Run a SQL querry on the netspeedlogger database and print a table of the results\"\"\" df = query ( sql_query ) print ( df . to_markdown ( index = showindex )) summary () \u00b6 Display summary of internet speed test results as a table Source code in netspeedlogger/cli.py def summary (): \"\"\"Display summary of internet speed test results as a table\"\"\" df = query ( ( \"select substr(timestamp,1,19) as 'Date Time', \" \" download_speed/(1024*1024) as 'Download Speed (Mb/s)', \" \" upload_speed/(1024*1024) as 'Upload Speed (Mb/s)', \" \" ping as 'Ping (ms)' \" \" from netspeedlogger \" ) ) print ( df . describe () . to_markdown ( index = True )) netspeedlogger \u00b6 get_database_path () \u00b6 Returns the path to the netspeedlogger sqlite database Set the env var NETSPEEDLOGGER to change the default folder location If NETSPEEDLOGGER is not set, it is stored here: ~/.netspeedlogger/netspeedlogger.sqlite3 If the folder .netspeedlogger doesn't exist, it will be created Source code in netspeedlogger/netspeedlogger.py def get_database_path (): \"\"\"Returns the path to the netspeedlogger sqlite database Set the env var NETSPEEDLOGGER to change the default folder location If NETSPEEDLOGGER is not set, it is stored here: ~/.netspeedlogger/netspeedlogger.sqlite3 If the folder .netspeedlogger doesn't exist, it will be created \"\"\" USERHOME = os . path . expanduser ( \"~\" ) database_folder = os . environ . get ( \"NETSPEEDLOGGER\" , os . path . join ( USERHOME , \".netspeedlogger\" ) ) if not os . path . isdir ( database_folder ): os . makedirs ( database_folder , exist_ok = True ) return os . path . join ( database_folder , \"netspeedlogger.sqlite3\" ) query ( query ) \u00b6 Run a SQL querry on the netspeedlogger database Source code in netspeedlogger/netspeedlogger.py def query ( query : str ): \"\"\"Run a SQL querry on the netspeedlogger database\"\"\" database_file = get_database_path () con = sqlite3 . connect ( database_file ) df = pd . read_sql_query ( query , con ) con . close () return df","title":"modules"},{"location":"api/#netspeedlogger","text":"Top-level package for Internet Speed Test Logger.","title":"netspeedlogger"},{"location":"api/#netspeedlogger.cli","text":"Console script for netspeedlogger.","title":"cli"},{"location":"api/#netspeedlogger.cli.delete_database","text":"Run a SQL querry on the netspeedlogger database and print a table of the results Source code in netspeedlogger/cli.py def delete_database (): \"\"\"Run a SQL querry on the netspeedlogger database and print a table of the results\"\"\" db_path = get_database_path () print ( f \"Deleting netspeedlogger database at path: ` { db_path } `\" ) print ( \"Are you sure you want to delete the whole database? Input 'y' for yes or 'n' for no\" ) for i in range ( 10 ): confirmation = input ( \"Please type 'y' for Yes or 'n' for No\" ) if confirmation == \"n\" : return \"Not deleting database\" elif confirmation == \"y\" : delete_database_if_exists () return \"Database deleted\"","title":"delete_database()"},{"location":"api/#netspeedlogger.cli.results","text":"Show all results from the netspeedlogger database If there are more than 10000 results, will show the first 10000 Source code in netspeedlogger/cli.py def results (): \"\"\"Show all results from the netspeedlogger database If there are more than 10000 results, will show the first 10000 \"\"\" sql_to_markdown ( \"select substr(timestamp,1,19) as 'Date Time', \" \" download_speed/(1024*1024) as 'Download Speed (Mb/s)', \" \" upload_speed/(1024*1024) as 'Upload Speed (Mb/s)', \" \" bytes_sent/(1024) as 'kB Sent', \" \" bytes_received/(1024) as 'kB Recieved', \" \" server_id as 'Server ID', \" \" server_host as 'Server Host', \" \" ping as 'Ping (ms)' \" \" from netspeedlogger limit 10000\" )","title":"results()"},{"location":"api/#netspeedlogger.cli.speedtest","text":"Run an internet speed test using speedtest-cli and save the results to a local sqlite database Source code in netspeedlogger/cli.py def speedtest (): \"\"\"Run an internet speed test using speedtest-cli and save the results to a local sqlite database\"\"\" print ( \"netspeedlogger speedtest\" ) print ( \"=\" * len ( \"netspeedlogger speedtest\" )) print ( \"Starting to run an internet speed test, and logging the output\" ) results_dict = run_speedtest () df = speedtest_dict_to_dataframe ( results_dict ) write_speedtest_to_database ( df ) print ( \"Speedtest complete. Results:\" ) print ( df . to_markdown ( index = False ))","title":"speedtest()"},{"location":"api/#netspeedlogger.cli.sql_to_markdown","text":"Run a SQL querry on the netspeedlogger database and print a table of the results Source code in netspeedlogger/cli.py def sql_to_markdown ( sql_query : str , showindex : bool = False ): \"\"\"Run a SQL querry on the netspeedlogger database and print a table of the results\"\"\" df = query ( sql_query ) print ( df . to_markdown ( index = showindex ))","title":"sql_to_markdown()"},{"location":"api/#netspeedlogger.cli.summary","text":"Display summary of internet speed test results as a table Source code in netspeedlogger/cli.py def summary (): \"\"\"Display summary of internet speed test results as a table\"\"\" df = query ( ( \"select substr(timestamp,1,19) as 'Date Time', \" \" download_speed/(1024*1024) as 'Download Speed (Mb/s)', \" \" upload_speed/(1024*1024) as 'Upload Speed (Mb/s)', \" \" ping as 'Ping (ms)' \" \" from netspeedlogger \" ) ) print ( df . describe () . to_markdown ( index = True ))","title":"summary()"},{"location":"api/#netspeedlogger.netspeedlogger","text":"","title":"netspeedlogger"},{"location":"api/#netspeedlogger.netspeedlogger.get_database_path","text":"Returns the path to the netspeedlogger sqlite database Set the env var NETSPEEDLOGGER to change the default folder location If NETSPEEDLOGGER is not set, it is stored here: ~/.netspeedlogger/netspeedlogger.sqlite3 If the folder .netspeedlogger doesn't exist, it will be created Source code in netspeedlogger/netspeedlogger.py def get_database_path (): \"\"\"Returns the path to the netspeedlogger sqlite database Set the env var NETSPEEDLOGGER to change the default folder location If NETSPEEDLOGGER is not set, it is stored here: ~/.netspeedlogger/netspeedlogger.sqlite3 If the folder .netspeedlogger doesn't exist, it will be created \"\"\" USERHOME = os . path . expanduser ( \"~\" ) database_folder = os . environ . get ( \"NETSPEEDLOGGER\" , os . path . join ( USERHOME , \".netspeedlogger\" ) ) if not os . path . isdir ( database_folder ): os . makedirs ( database_folder , exist_ok = True ) return os . path . join ( database_folder , \"netspeedlogger.sqlite3\" )","title":"get_database_path()"},{"location":"api/#netspeedlogger.netspeedlogger.query","text":"Run a SQL querry on the netspeedlogger database Source code in netspeedlogger/netspeedlogger.py def query ( query : str ): \"\"\"Run a SQL querry on the netspeedlogger database\"\"\" database_file = get_database_path () con = sqlite3 . connect ( database_file ) df = pd . read_sql_query ( query , con ) con . close () return df","title":"query()"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Mark Franey franey.mark@gmail.com Contributors \u00b6 None yet. Why not be the first?","title":"authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Mark Franey franey.mark@gmail.com","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/radinplaid/netspeedlogger/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 Internet Speed Test Logger could always use more documentation, whether as part of the official Internet Speed Test Logger docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/radinplaid/netspeedlogger/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up netspeedlogger for local development. Fork the netspeedlogger repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/netspeedlogger.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/radinplaid/netspeedlogger/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 $ pytest tests.test_netspeedlogger ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/radinplaid/netspeedlogger/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Internet Speed Test Logger could always use more documentation, whether as part of the official Internet Speed Test Logger docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/radinplaid/netspeedlogger/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up netspeedlogger for local development. Fork the netspeedlogger repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/netspeedlogger.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/radinplaid/netspeedlogger/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest tests.test_netspeedlogger ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.1.0 (2021-12-17) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#010-2021-12-17","text":"First release on PyPI.","title":"0.1.0 (2021-12-17)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install Internet Speed Test Logger, run this command in your terminal: 1 $ pip install netspeedlogger This is the preferred method to install Internet Speed Test Logger, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for Internet Speed Test Logger can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/radinplaid/netspeedlogger Or download the tarball : 1 $ curl -OJL https://github.com/radinplaid/netspeedlogger/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install Internet Speed Test Logger, run this command in your terminal: 1 $ pip install netspeedlogger This is the preferred method to install Internet Speed Test Logger, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for Internet Speed Test Logger can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/radinplaid/netspeedlogger Or download the tarball : 1 $ curl -OJL https://github.com/radinplaid/netspeedlogger/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use Internet Speed Test Logger in a project 1 import netspeedlogger","title":"usage"},{"location":"usage/#usage","text":"To use Internet Speed Test Logger in a project 1 import netspeedlogger","title":"Usage"}]}